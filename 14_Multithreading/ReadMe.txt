Многопоточность. Ознакомительный курс.
Применение: Класс Thread, интерфейс Runnable, атомарные переменные, Synchronized-методы, 
протоколобезопасные классы, взаимная блокировка Deadlock, интерфейс Callable, Executors, Executor и ExecutorService,
метод Shutdown. ThreadPoolExecutor, ForkJoinPool и RecursiveTask.

Задания: 1.Написана прорамма по уменьшению изображений на основе проекта ImageResizer. 
Она запускает число потоков, равное количеству ядер процессора компьютера (устанавливается вручную).

	 2. Программа обработки транзакций. С условиями: все счета хранятся внутри банка. 
Множество клиентов банка могут одновременно переводить деньги между счетами и запрашивать баланс по своему счёту. 
Всё происходит в highly concurrent (многопоточной) среде. При этом транзакции на суммы > 50000 отправляются на проверку 
в службу безопасности. Можно считать, что таких транзакций не более 5% от всех. За проверку отвечает отдельный и уже 
реализованный метод Bank.isFraud(). Служба безопасности не может обрабатывать более одной транзакции одновременно. 
Проверка занимает 1000 мс. Если служба безопасности обнаружила мошенничество, необходимо заблокировать оба счёта, 
то есть запретить любые изменения остатков в дальнейшем.

	 3. Приложение, которое в многопоточном режиме сформирует карту заданного сайта, 
и запишите её в файл. Ссылки на дочерние страницы должны располагаться в файле с отступами на одну табуляцию 
относительно родительских.
В файле ссылки на страницы, размещённые на том же домене. В списке нет:
ссылок на другие сайты и поддомены,
ссылок на внутренние элементы страниц (у таких ссылок есть символ # после адреса страницы).
При запросе страниц выдерживается пауза (с помощью метода sleep() у потока), чтобы сайт не заблокировал доступ.
Для отладки программы выбран сайт http://www.lenta.ru/.
